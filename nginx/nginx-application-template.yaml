apiVersion: v1
kind: Template
labels:
  template: nginx-application-template
message: For more information about using this template, including OpenShift considerations,
  see the documentation (TODO).
metadata:
  annotations:
    description: This templates performs the basic setup for applications.
    iconClass: icon-nginx
    openshift.io/display-name: NGINX Application Template
    template.openshift.io/documentation-url: TODO
    template.openshift.io/long-description: This template defines resources needed
      to develop an application, including a build configuration, application deployment
      configuration.
    template.openshift.io/provider-display-name: TODO
    template.openshift.io/support-url: TODO
  name: nginx-application-template
  namespace: openshift
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION}
    name: ${APPLICATION}
  spec:
    successfulBuildsHistoryLimit: 5
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: ${GIT_URL}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: rhscl_nginx-112-rhel7:latest
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APPLICATION}
    name: ${APPLICATION}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: ${REGISTRY}/${NAMESPACE}/${APPLICATION}:latest
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APPLICATION}
    name: ${APPLICATION}
  spec:
    replicas: ${INITIAL_REPLICAS}
    selector:
      deploymentconfig: ${APPLICATION}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION}
          deploymentconfig: ${APPLICATION}
      spec:
        containers:
        - image: ${REGISTRY}/${NAMESPACE}/${APPLICATION}:latest
          imagePullPolicy: Always
          name: ${APPLICATION}
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          resources:
            limits:
              cpu: '1'
              memory: 1000Mi
            requests:
              cpu: 200m
              memory: 100Mi
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION}:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION}
    name: ${APPLICATION}
  spec:
    host: ${APPLICATION}-${NAMESPACE}.${APPLICATION_DOMAIN}
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APPLICATION}
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - status: "True"
        type: Admitted
      host: ${APPLICATION}-${NAMESPACE}.${APPLICATION_DOMAIN}
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION}
    name: ${APPLICATION}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APPLICATION}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: autoscaling/v1
  kind: HorizontalPodAutoscaler
  metadata:
    labels:
      app: ${APPLICATION}
    name: ${APPLICATION}
  spec:
    maxReplicas: 10
    minReplicas: 2
    scaleTargetRef:
      apiVersion: v1
      kind: DeploymentConfig
      name: ${APPLICATION}
    targetCPUUtilizationPercentage: 60
  parameters:
- description: The name of the cluster central namespace.
  displayName: Central Namespace
  name: CENTRAL_NAMESPACE
  required: true
  value: openshift
- description: The name of the application project / OpenShift namespace.
  displayName: The name of the application project / OpenShift namespace.
  name: NAMESPACE
  required: true
- description: The name of the application.
  displayName: Application
  name: APPLICATION
  required: true
  value: ${APPLICATION}
- description: The exposed hostname that will route to the application's service,
    if left blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- description: The GIT URL for the source code used in the application build
  displayName: Git URL
  name: GIT_URL
  required: true
- description: The registry URL; defaults to OpenShift internal registry service name/port ('docker-registry.default.svc:5000'); for 'minishift' use '172.30.1.1:5000'
  displayName: Registry URL
  name: REGISTRY
  required: true
  value: docker-registry.default.svc:5000
- description: Initial numbers of replicas
  displayName: (Initial) Number of Replicas
  name: INITIAL_REPLICAS
  required: false
  value: 2
